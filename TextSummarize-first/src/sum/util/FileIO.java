package sum.util;

import sum.data.Sentence;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;

public class FileIO {
	
	/**
	 * Read lines of a file and return a list where each element is a line.
	 * @param filename the file to read
	 * @return the read lines
	 */
	public static ArrayList<String> readLines(String filename) {
		ArrayList<String> ret = new ArrayList<String>();
        BufferedReader in = null;

		try {
            FileInputStream fis = new FileInputStream(filename);
            in = new BufferedReader(new InputStreamReader(fis, "UTF-8"));
            String line;
            while ((line = in.readLine()) != null) {
                line = line.trim();
                if (line.isEmpty())
                    continue;
                ret.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            closeStream(in);
        }

		return ret;
	}
	
	/**
	 * Read the content of a file and return the content as a string.
	 * @param filename the name of the file
	 * @return the content of the file as a string
	 */
	public static String readFile(String filename) {
		String ret = "";

		BufferedReader in = null;
        try {
            in = new BufferedReader(new InputStreamReader(new FileInputStream(filename), "UTF-8"));

            String line;
            while ((line = in.readLine()) != null) {
                ret += line + "\n";
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            closeStream(in);
        }

		return ret;
	}
	
	/**
	 * Write a given string to a file. 
	 * @param filename name of the file
	 * @param toWrite string to write
	 */
	public static void writeFile(String filename, String toWrite) {
        PrintWriter out = null;
        try {
            out = new PrintWriter(new FileWriter(filename));
            out.print(toWrite);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) out.close();
        }
	}
	
	/**
	 * Write the text content of a list of sentences to a file. 
	 * @param filename name of the file
	 * @param sentList arraylist of sentences to write
	 */
	public static void writeFile(String filename, ArrayList<Sentence> sentList) {
        PrintWriter out = null;
        try {
            out = new PrintWriter(new FileWriter(filename));
            for(Sentence sent : sentList)
                out.println(sent.getText());

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) out.close();
        }
	}
	
	/**
	 * Read a map from a file. 
	 * file format: key\tvalue
	 */
	public static HashMap<String, Double> readMapFromFile(String filename) {
		HashMap<String, Double> ret = new HashMap<String, Double>();
        BufferedReader in = null;
        try {
            in = new BufferedReader(new FileReader(filename));
            String line;
            while((line = in.readLine()) != null) {
                line = line.trim();
                if(line.isEmpty()) continue;

                String [] arr = line.split("\t");
                ret.put(arr[0], Double.parseDouble(arr[1]));
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            closeStream(in);
        }

		return ret;
	}
	
	/**
	 * Write the feature vectors of sentences to specified file, according to the 
	 * format used by libsvm. 
	 */
	public static void writeFeatures(String filename, ArrayList<Sentence> sentList, 
			HashMap<String, Double> features)
	{
        PrintWriter out = null;
        try {
            out = new PrintWriter(new FileWriter(filename));
            for(Sentence sent : sentList) {
                int label = 1;
                out.printf("%.5f\t", sent.getScore());

                for(String key : features.keySet())
                {
                    if(sent.getFeatureVector().containsKey(key))
                        out.printf("%d:%.5f\t", label, MapUtil.get(sent.getFeatureVector(), key));
                    //out.printf("%s:%.5f\t", key, MapUtil.get(sent.getFeatureVector(), key));
                    label++;
                }

                out.println();
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (out != null) out.close();
        }


		
	}
	
	/**
	 * read regression result from a file generated by svm_predict of libsvm. 
	 */
	public static ArrayList<Double> readRegressionResult(String filename) {
		ArrayList<Double> ret = new ArrayList<Double>();

        BufferedReader in = null;
        try {
            in = new BufferedReader(new FileReader(filename));

            String line;
            while((line = in.readLine()) != null) {
                line = line.trim();
                if(line.isEmpty()) continue;

                ret.add(Double.parseDouble(line));
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            closeStream(in);
        }

		return ret;
	}

    private static void closeStream(Closeable c) {
        if (c != null) try {
            c.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
